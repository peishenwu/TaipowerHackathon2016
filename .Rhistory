print(M, "chart", file = "final_report.html")
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
str(plot.data)
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 1)
#library(googleVis)
#plot1 <- gvisBubbleChart(plot.data,
#                         idvar="location",
#                         xvar="TotalPeople", yvar="CostPerPerson",
#                         #colorvar="Year", sizevar="Profit",
#                         options=list(width=800, height=600))
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 2016)
#library(googleVis)
#plot1 <- gvisBubbleChart(plot.data,
#                         idvar="location",
#                         xvar="TotalPeople", yvar="CostPerPerson",
#                         #colorvar="Year", sizevar="Profit",
#                         options=list(width=800, height=600))
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
names(final.merge)
names(data.merge)
View(restrict.count)
names(restrict.count) <- c("town","manufacture","non_manufacture")
names(final.merge)
(final.merge$town.x)
names(restrict.count) <- c("town.x","manufacture","non_manufacture")
final.merge <- merge(kWperPerson.total, edu.stat, by = "ID")
final.merge <- merge(final.merge, total.kW, by = "ID")
final.merge <- merge(final.merge, kWperPerson.avg, by = "ID")
final.merge <- merge(final.merge, kWperPerson.sd, by = "ID")
final.merge <- merge(final.merge, aggregate(CostPerPerson ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, aggregate(CostPerCount ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, aggregate(kWperCount ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, data.people, by = "ID")
final.merge <- merge(final.merge, data.people2, by = "ID")
final.merge <- merge(final.merge, restrict.count, by = "town.x")
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
Manufacture = as.numeric(final.merge$manufacture),
Non_Manufacture = as.numeric(final.merge$non_manufacture),
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 2016)
#library(googleVis)
#plot1 <- gvisBubbleChart(plot.data,
#                         idvar="location",
#                         xvar="TotalPeople", yvar="CostPerPerson",
#                         #colorvar="Year", sizevar="Profit",
#                         options=list(width=800, height=600))
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
Manufacture_Industry = as.numeric(final.merge$manufacture),
Service_Industry = as.numeric(final.merge$non_manufacture),
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 2016)
#library(googleVis)
#plot1 <- gvisBubbleChart(plot.data,
#                         idvar="location",
#                         xvar="TotalPeople", yvar="CostPerPerson",
#                         #colorvar="Year", sizevar="Profit",
#                         options=list(width=800, height=600))
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
Manufacture_Industry = as.numeric(final.merge$manufacture),
Service_Industry = as.numeric(final.merge$non_manufacture),
Industry_Total = as.numeric(final.merge$non_manufacture) + as.numeric(final.merge$manufacture),
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 2016)
#library(googleVis)
#plot1 <- gvisBubbleChart(plot.data,
#                         idvar="location",
#                         xvar="TotalPeople", yvar="CostPerPerson",
#                         #colorvar="Year", sizevar="Profit",
#                         options=list(width=800, height=600))
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
names(data.merge)
count <- data.merge[,c(1,5)]
final.merge <- merge(final.merge, count, by = "ID")
View(count)
### make plot data ###
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
member_per_count = as.numeric(final.merge$people_total)/as.numeric(final.merge$COUNT),
Manufacture_Industry = as.numeric(final.merge$manufacture),
Service_Industry = as.numeric(final.merge$non_manufacture),
Industry_Total = as.numeric(final.merge$non_manufacture) + as.numeric(final.merge$manufacture),
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 2016)
#library(googleVis)
#plot1 <- gvisBubbleChart(plot.data,
#                         idvar="location",
#                         xvar="TotalPeople", yvar="CostPerPerson",
#                         #colorvar="Year", sizevar="Profit",
#                         options=list(width=800, height=600))
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
options(stringsAsFactors = F)
setwd("/Users/peishenwu/Google 雲端硬碟/【01】醫學/PMR/R3/TaiPowerHackathon")
#data.raw <- read.csv("台灣電力公司_過去電力供需資訊.csv",header = T)
#data.raw <- read.csv("open_sell_amt_vil.csv")
#data.raw3 <- read.csv("open_sell_amt_city.csv",header = T)
#data.raw4 <- read.csv("open_sell_amt_gov.csv",header = T)
#data.raw <- read.csv("opendata104Y010.csv", header = T)
#library(foreign)
#setwd("/Users/peishenwu/Google 雲端硬碟/【01】醫學/PMR/R3/TaiPowerHackathon/0-63000.rar Folder")
#data.raw <- read.dbf("G97_63000_U0200_2015.dbf")
##
data1.raw <- read.csv("1050607台北市各地用電量.csv")
data2.raw <- read.csv("code_to_address_utf8.csv")
#data1.raw$ID <- paste(data1.raw$CODEBASE,data1.raw$CODE1, data1.raw$CODE2, data1.raw$VILLCODE, sep="")
#data2.raw$ID <- paste(data2.raw$CODEBASE,data2.raw$CODE1, data2.raw$CODE2, data2.raw$VILLCODE, sep="")
#data.merge <- merge(data1.raw, data2.raw, by = "ID")
data.merge <- merge(data1.raw, data2.raw, by = "CODEBASE")
data.merge <- data.merge[,c(1,2,3,4,5,16,18,23,24,25,26)]
data.merge$year <- substr(data.merge$YM,1,3)
data.merge$month <- substr(data.merge$YM,4,5)
data.merge$ID <- paste(data.merge$TOWN, data.merge$VILLAGE, sep="")
##
library(xlsx)
univ.data <- read.xlsx2("全國大專院校.xls",2)
kinder.data <- read.xlsx2("全國幼兒園.xls",2)
HS.data <- read.xlsx2("全國高中.xlsx",1)
JH.data <- read.xlsx2("全國國中.xlsx",1)
ES.data <- read.xlsx2("全國國小.xlsx",1)
#select Taipei only
univ.data$地址 <- gsub("\\[\\d\\d\\d\\]","",univ.data$地址)
kinder.data$地址 <- gsub("\\[\\d\\d\\d\\]","",kinder.data$地址)
HS.data$地址 <- gsub("\\[\\d\\d\\d\\]","",HS.data$地址)
JH.data$地址 <- gsub("\\[\\d\\d\\d\\]","",JH.data$地址)
ES.data$地址 <- gsub("\\[\\d\\d\\d\\]","",ES.data$地址)
univ.data <- univ.data[grepl("臺北市",univ.data$地址),]
kinder.data <- kinder.data[grepl("臺北市",kinder.data$地址),]
HS.data <- HS.data[grepl("臺北市",HS.data$地址),]
JH.data <- JH.data[grepl("臺北市",JH.data$地址),]
ES.data <- ES.data[grepl("臺北市",ES.data$地址),]
univ.data$town <- substr(univ.data$地址,4,6)
kinder.data$town <- substr(kinder.data$地址,4,6)
HS.data$town <- substr(HS.data$地址,4,6)
JH.data$town <- substr(JH.data$地址,4,6)
ES.data$town <- substr(ES.data$地址,4,6)
univ.data$village <- substr(univ.data$地址,7,9)
kinder.data$village <- substr(kinder.data$地址,7,9)
HS.data$village <- substr(HS.data$地址,7,9)
JH.data$village <- substr(JH.data$地址,7,9)
ES.data$village <- substr(ES.data$地址,7,9)
##extract those without village...
#without_village <- rbind(data.frame(univ.data[!grepl("里",univ.data$village),c(2,3,4,8,9)],type = "UNIV"),
#                         #data.frame(kinder.data[!grepl("里",kinder.data$village),c(2,3,5,7,8)],type = "KIND"),
#                         data.frame(HS.data[!grepl("里",HS.data$village),c(2,3,4,9,10)],type = "HS"),
#                         data.frame(JH.data[!grepl("里",JH.data$village),c(2,3,4,7,8)],type = "JH"),
#                         data.frame(ES.data[!grepl("里",ES.data$village),c(1,2,3,6,7)],type = "ES"))
#write.xlsx(without_village,"without_village.xlsx","without_village")
##
#library(XML)
#x <- xmlParse("taipei_business.xml", encoding = "utf8")
#xmlfiles <- xmlRoot(x)
#y <- xmlToDataFrame(xmlfiles)
labeled <- read.xlsx2("village_labeled.xlsx",1)
with_village <- rbind(#data.frame(univ.data[grepl("里",univ.data$village),c(2,3,4,8,9)],type = "UNIV"),
data.frame(kinder.data[grepl("里",kinder.data$village),c(2,3,5,7,8)],type = "KIND"),
data.frame(HS.data[grepl("里",HS.data$village),c(2,3,4,9,10)],type = "HS"),
data.frame(JH.data[grepl("里",JH.data$village),c(2,3,4,7,8)],type = "JH"),
data.frame(ES.data[grepl("里",ES.data$village),c(1,2,3,6,7)],type = "ES"))
edu.merge <- rbind(labeled, with_village)
edu.merge$ID <- paste(edu.merge$town,edu.merge$village,sep="")
##
restrict.manuf <- read.csv("年度列管能源用戶名單—生產性質行業-10506.csv")
restrict.nonmanuf <- read.csv("年度列管能源用戶名單—非生產性質行業-10506.csv")
#only Taipei
restrict.manuf <- restrict.manuf[grepl("臺北市",restrict.manuf$所在區域),]
restrict.nonmanuf <- restrict.nonmanuf[grepl("臺北市",restrict.nonmanuf$所在區域),]
restrict.manuf$town <- substr(restrict.manuf$所在區域,4,6)
restrict.nonmanuf$town <- substr(restrict.nonmanuf$所在區域,4,6)
##population data
data.people <- read.xlsx2("戶數.xlsx",1)
data.people <- data.people[-1,]
data.people <- data.people[grepl("臺北市",data.people$site_id),] #only Taipei
data.people$town <- substr(data.people$site_id,4,6)
data.people$ID <- paste(data.people$town, data.people$village, sep="")
#
data.people2 <- read.csv("戶數及人口結構utf8.csv")
data.people2 <- data.people2[-1,]
data.people2 <- data.people2[grepl("臺北市",data.people2$site_id),] #only Taipei
data.people2$town <- substr(data.people2$site_id,4,6)
data.people2$ID <- paste(data.people2$town, data.people2$village, sep="")
#divide into 0-19, 20-64, 65-100
data.people2$below20 <- sapply(1:nrow(data.people2),
function(x){
sum(as.numeric(data.people2[x,8:47]))
})
data.people2$from20to65 <- sapply(1:nrow(data.people2),
function(x){
sum(as.numeric(data.people2[x,48:137]))
})
data.people2$above65 <- sapply(1:nrow(data.people2),
function(x){
sum(as.numeric(data.people2[x,138:209]))
})
data.people2 <- data.people2[,c(1:7,210:214)]
data.people2$below20_percentage <- sapply(1:nrow(data.people2),
function(x){
100*data.people2$below20[x]/sum(data.people2$below20[x] + data.people2$from20to65[x] + data.people2$above65[x])
})
data.people2$from20to65_percentage <- sapply(1:nrow(data.people2),
function(x){
100*data.people2$from20to65[x]/sum(data.people2$below20[x] + data.people2$from20to65[x] + data.people2$above65[x])
})
data.people2$above65_percentage <- sapply(1:nrow(data.people2),
function(x){
100*data.people2$above65[x]/sum(data.people2$below20[x] + data.people2$from20to65[x] + data.people2$above65[x])
})
#merge:{ data.merge, data.people, restrict.manuf, restrict.nonmanuf, edu.merge, data.people, data.people2 }
data.merge <- merge(data.merge, data.people, by = "ID")
data.merge <- merge(data.merge, data.people2, by = "ID")
data.merge$people_total <- as.numeric(data.merge$people_total)
data.merge$kWperPerson <- data.merge$kW/data.merge$people_total
data.merge$kWperCount <- data.merge$kW/data.merge$COUNT
#
##2016/3/29 台電6月夏季收費標準
data.merge$CostPerCount <- sapply(data.merge$kWperCount,
function(x){
if(x <= 110){result <- 2.1*x}
if(x > 110 & x <= 330){result <- 3.02*(x-110) + 2.1*110}
if(x > 330 & x <= 500){result <- 4.05*(x-330) + 3.02*220 + 2.1*110}
if(x > 500 & x <= 700){result <- 4.51*(x-500) + 4.05*170 + 3.02*220 + 2.1*110}
if(x > 700){result <- 5.10*(x-700) + 4.51*200 + 4.05*170 + 3.02*220 + 2.1*110}
#
result
})
data.merge$CostPerPerson <- data.merge$CostPerCount*data.merge$COUNT/data.merge$people_total
#
total.kW <- aggregate(kW ~ ID, data = data.merge, function(x){sum(max(x))})
kWperPerson.total <- aggregate(kWperPerson ~ ID, data = data.merge, function(x){sum(max(x))})
names(kWperPerson.total) <- c("ID","kWperPerson.total")
kWperPerson.avg <- aggregate(kWperPerson ~ ID, data = data.merge, function(x){mean(max(x))})
names(kWperPerson.avg) <- c("ID","kWperPerson.avg")
kWperPerson.sd <- aggregate(kWperPerson ~ ID + month, data = data.merge, function(x){sd(x)})
kWperPerson.sd$IDtime <- paste(kWperPerson.sd$ID, kWperPerson.sd$month, sep="")
mkWperPerson.total <- aggregate(kWperPerson ~ ID + month, data = data.merge, function(x){sum(x)})
kWperPerson.sd <- merge(kWperPerson.sd, data.frame(IDtime = paste(mkWperPerson.total$ID, mkWperPerson.total$month,sep=""),
total.kWperPerson = mkWperPerson.total$kWperPerson),
by = "IDtime")
kWperPerson.sd <- sapply(kWperPerson.sd$ID,
function(x){kWperPerson.sd$kWperPerson[kWperPerson.sd$ID == x
& kWperPerson.sd$total.kWperPerson == max(kWperPerson.sd$total.kWperPerson[kWperPerson.sd$ID == x])]
})
kWperPerson.sd <- data.frame(ID = names(kWperPerson.sd), kWperPerson.sd = kWperPerson.sd)
kWperPerson.sd <- unique(kWperPerson.sd)
##
restrict.count.nm <- as.data.frame(table(restrict.nonmanuf$town))
restrict.count.m <- as.data.frame(table(restrict.manuf$town))
restrict.count <- merge(restrict.count.m, restrict.count.nm, by = "Var1")
names(restrict.count) <- c("town.x","manufacture","non_manufacture")
##
edu.stat <- as.matrix(table(edu.merge$ID, edu.merge$type))
edu.stat <- data.frame(ID = attributes(edu.stat)$dimnames[[1]],
ES = edu.stat[,1],
HS = edu.stat[,2],
JH = edu.stat[,3],
KIND = edu.stat[,4],
UNIV = edu.stat[,5])
count <- unique(data.merge[,c(1,5)])
final.merge <- merge(kWperPerson.total, edu.stat, by = "ID")
final.merge <- merge(final.merge, total.kW, by = "ID")
final.merge <- merge(final.merge, kWperPerson.avg, by = "ID")
final.merge <- merge(final.merge, kWperPerson.sd, by = "ID")
final.merge <- merge(final.merge, aggregate(CostPerPerson ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, aggregate(CostPerCount ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, aggregate(kWperCount ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, data.people, by = "ID")
final.merge <- merge(final.merge, data.people2, by = "ID")
final.merge <- merge(final.merge, restrict.count, by = "town.x")
final.merge <- merge(final.merge, count, by = "ID")
#CostPerCount <- aggregate(CostPerCount ~ ID, data.merge, function(x){max(x)})
#CostPerPerson <- aggregate(CostPerPerson ~ ID, data.merge, function(x){max(x)})
#kWperCount <- aggregate(kWperCount ~ ID, data.merge, function(x){max(x)})
### make plot data ###
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
member_per_count = as.numeric(final.merge$people_total)/as.numeric(final.merge$COUNT),
Manufacture_Industry = as.numeric(final.merge$manufacture),
Service_Industry = as.numeric(final.merge$non_manufacture),
Industry_Total = as.numeric(final.merge$non_manufacture) + as.numeric(final.merge$manufacture),
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 2016)
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
View(count)
count <- aggregate(COUNT ~ ID, data = data.merge, sum)
View(count)
edu.stat <- as.matrix(table(edu.merge$ID, edu.merge$type))
edu.stat <- data.frame(ID = attributes(edu.stat)$dimnames[[1]],
ES = edu.stat[,1],
HS = edu.stat[,2],
JH = edu.stat[,3],
KIND = edu.stat[,4],
UNIV = edu.stat[,5])
count <- aggregate(COUNT ~ ID, data = data.merge, sum)
final.merge <- merge(kWperPerson.total, edu.stat, by = "ID")
final.merge <- merge(final.merge, total.kW, by = "ID")
final.merge <- merge(final.merge, kWperPerson.avg, by = "ID")
final.merge <- merge(final.merge, kWperPerson.sd, by = "ID")
final.merge <- merge(final.merge, aggregate(CostPerPerson ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, aggregate(CostPerCount ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, aggregate(kWperCount ~ ID, data.merge, function(x){max(x)}), by = "ID")
final.merge <- merge(final.merge, data.people, by = "ID")
final.merge <- merge(final.merge, data.people2, by = "ID")
final.merge <- merge(final.merge, restrict.count, by = "town.x")
final.merge <- merge(final.merge, count, by = "ID")
#CostPerCount <- aggregate(CostPerCount ~ ID, data.merge, function(x){max(x)})
#CostPerPerson <- aggregate(CostPerPerson ~ ID, data.merge, function(x){max(x)})
#kWperCount <- aggregate(kWperCount ~ ID, data.merge, function(x){max(x)})
### make plot data ###
plot.data <- data.frame(location = factor(final.merge$ID),
kindergarden = as.numeric(final.merge$KIND),
elementary_schools = as.numeric(final.merge$ES),
juniorhigh_schools = as.numeric(final.merge$JH),
seniorhigh_schools = as.numeric(final.merge$HS),
universities = as.numeric(final.merge$UNIV),
kWperPerson.avg = final.merge$kWperPerson.avg,
kWperCount = final.merge$kWperCount,
kWperPerson.sd = final.merge$kWperPerson.sd,
#kWperPerson.total = final.merge$kWperPerson.total,
member_per_count = as.numeric(final.merge$people_total)/as.numeric(final.merge$COUNT),
Manufacture_Industry = as.numeric(final.merge$manufacture),
Service_Industry = as.numeric(final.merge$non_manufacture),
Industry_Total = as.numeric(final.merge$non_manufacture) + as.numeric(final.merge$manufacture),
Total.kW = final.merge$kW,
CostPerPerson = final.merge$CostPerPerson,
CostPerCount = final.merge$CostPerCount,
TotalPeople = as.numeric(final.merge$people_total),
#TotalCount = final.merge$COUNT,
below20_percentage = final.merge$below20_percentage,
from20to65_percentage = final.merge$from20to65_percentage,
above65_percentage = final.merge$above65_percentage,
time = 2016)
#library(googleVis)
#plot1 <- gvisBubbleChart(plot.data,
#                         idvar="location",
#                         xvar="TotalPeople", yvar="CostPerPerson",
#                         #colorvar="Year", sizevar="Profit",
#                         options=list(width=800, height=600))
#plot(plot1)
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
View(data.merge)
View(data.raw)
View(data1.raw)
setwd("/Users/peishenwu/Google 雲端硬碟/【01】醫學/PMR/R3/TaiPowerHackathon/0-63000.rar Folder")
data.raw <- read.dbf("G97_63000_U0200_2015.dbf")
View(data.raw)
View(data.people)
View(data.people2)
print(M, "chart", file = "final_report.html")
src <- readLines("weekly_report.html")
write(paste('<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>',
paste(src,collapse="\n"),"</body></html>",sep=""), file = "final_report.html",append=F) ##erase with empty file
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
src <- readLines("final_report.html")
write(paste('<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>',
paste(src,collapse="\n"),"</body></html>",sep=""), file = "final_report.html",append=F) ##erase with empty file
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
src <- readLines("final_report.html")
write(paste('<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>',
paste(src,collapse="\n"),"</body></html>",sep=""), file = "final_report.html",append=F) ##erase with empty file
getwd()
setwd("/Users/peishenwu/Google 雲端硬碟/【01】醫學/PMR/R3/TaiPowerHackathon")
M <- gvisMotionChart(plot.data, "location", "time", options=list(width=1200, height=800))
#plot(M)
print(M, "chart", file = "final_report.html")
src <- readLines("final_report.html")
write(paste('<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>',
paste(src,collapse="\n"),"</body></html>",sep=""), file = "final_report.html",append=F) ##erase with empty file
